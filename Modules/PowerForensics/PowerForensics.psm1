#
# Script module for module 'PowerForensics'
#

# Set up some helper variables to make it easier to work with the module
$PSModule = $ExecutionContext.SessionState.Module
$PSModuleRoot = $PSModule.ModuleBase

# Import the appropriate nested binary module based on the current PowerShell version
$binaryModuleRoot = $PSModuleRoot


if (($PSVersionTable.Keys -contains "PSEdition") -and ($PSVersionTable.PSEdition -ne 'Desktop')) {
    $binaryModuleRoot = Join-Path -Path $PSModuleRoot -ChildPath 'lib\coreclr'
}
else
{
    $binaryModuleRoot = Join-Path -Path $PSModuleRoot -ChildPath 'lib\PSv2'
}

$binaryModulePath = Join-Path -Path $binaryModuleRoot -ChildPath 'PowerForensics.dll'
$binaryModule = Import-Module -Name $binaryModulePath -PassThru

# When the module is unloaded, remove the nested binary module that was loaded with it
$PSModule.OnRemove = {
    Remove-Module -ModuleInfo $binaryModule
}

function Add-PowerForensicsType
{
    if (('PowerForensics.BootSector.MasterBootRecord' -as [Type]) -eq $null)
    {
        $pscore = ''
        $lengthcore = 172544
        $psv2 = '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'
        $lengthv2 = 171520

        if (($PSVersionTable.Keys -contains "PSEdition") -and ($PSVersionTable.PSEdition -ne 'Desktop'))
        {
            $EncodedCompressedFile = $pscore
            $Length = $lengthcore
        }
        else 
        {
            $EncodedCompressedFile = $psv2 
            $Length = $lengthv2
        }

        $DeflatedStream = New-Object IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String($EncodedCompressedFile),[IO.Compression.CompressionMode]::Decompress)
        $UncompressedFileBytes = New-Object Byte[]($Length)
        $DeflatedStream.Read($UncompressedFileBytes, 0, $Length) | Out-Null
        [Reflection.Assembly]::Load($UncompressedFileBytes)
    }
}

if ($PSVersionTable.PSVersion.Major -gt 2)
{
    #requires -Version 3
    # Usage:
    # Invoke-command -computername $server -scriptblock {FunctionName -param1 -param2}
    # Author: Matt Graeber
    # @mattifestation 
    # www.exploit-monday.com

    function Invoke-Command
    {
        [CmdletBinding(DefaultParameterSetName='InProcess', HelpUri='http://go.microsoft.com/fwlink/?LinkID=135225', RemotingCapability='OwnedByCommand')]
        param(
            [Parameter(ParameterSetName='FilePathRunspace', Position=0)]
            [Parameter(ParameterSetName='Session', Position=0)]
            [ValidateNotNullOrEmpty()]
            [System.Management.Automation.Runspaces.PSSession[]]
            ${Session},

            [Parameter(ParameterSetName='FilePathComputerName', Position=0)]
            [Parameter(ParameterSetName='ComputerName', Position=0)]
            [Alias('Cn')]
            [ValidateNotNullOrEmpty()]
            [string[]]
            ${ComputerName},

            [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]
            [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]
            [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
            [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
            [pscredential]
            [System.Management.Automation.CredentialAttribute()]
            ${Credential},

            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='FilePathComputerName')]
            [ValidateRange(1, 65535)]
            [int]
            ${Port},

            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='FilePathComputerName')]
            [switch]
            ${UseSSL},

            [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
            [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
            [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]
            [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]
            [string]
            ${ConfigurationName},

            [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
            [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
            [string]
            ${ApplicationName},

            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='Session')]
            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='FilePathRunspace')]
            [Parameter(ParameterSetName='FilePathUri')]
            [Parameter(ParameterSetName='Uri')]
            [int]
            ${ThrottleLimit},

            [Parameter(ParameterSetName='Uri', Position=0)]
            [Parameter(ParameterSetName='FilePathUri', Position=0)]
            [Alias('URI','CU')]
            [ValidateNotNullOrEmpty()]
            [uri[]]
            ${ConnectionUri},

            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='Uri')]
            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='FilePathRunspace')]
            [Parameter(ParameterSetName='FilePathUri')]
            [Parameter(ParameterSetName='Session')]
            [switch]
            ${AsJob},

            [Parameter(ParameterSetName='Uri')]
            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='FilePathUri')]
            [Parameter(ParameterSetName='ComputerName')]
            [Alias('Disconnected')]
            [switch]
            ${InDisconnectedSession},

            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='ComputerName')]
            [ValidateNotNullOrEmpty()]
            [string[]]
            ${SessionName},

            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='Session')]
            [Parameter(ParameterSetName='FilePathRunspace')]
            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='FilePathUri')]
            [Parameter(ParameterSetName='Uri')]
            [Alias('HCN')]
            [switch]
            ${HideComputerName},

            [Parameter(ParameterSetName='Session')]
            [Parameter(ParameterSetName='FilePathRunspace')]
            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='FilePathUri')]
            [Parameter(ParameterSetName='Uri')]
            [string]
            ${JobName},

            [Parameter(ParameterSetName='Session', Mandatory=$true, Position=1)]
            [Parameter(ParameterSetName='Uri', Mandatory=$true, Position=1)]
            [Parameter(ParameterSetName='InProcess', Mandatory=$true, Position=0)]
            [Parameter(ParameterSetName='ComputerName', Mandatory=$true, Position=1)]
            [Alias('Command')]
            [ValidateNotNull()]
            [scriptblock]
            ${ScriptBlock},

            [Parameter(ParameterSetName='InProcess')]
            [switch]
            ${NoNewScope},

            [Parameter(ParameterSetName='FilePathUri', Mandatory=$true, Position=1)]
            [Parameter(ParameterSetName='FilePathComputerName', Mandatory=$true, Position=1)]
            [Parameter(ParameterSetName='FilePathRunspace', Mandatory=$true, Position=1)]
            [Alias('PSPath')]
            [ValidateNotNull()]
            [string]
            ${FilePath},

            [Parameter(ParameterSetName='Uri')]
            [Parameter(ParameterSetName='FilePathUri')]
            [switch]
            ${AllowRedirection},

            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='Uri')]
            [Parameter(ParameterSetName='FilePathUri')]
            [System.Management.Automation.Remoting.PSSessionOption]
            ${SessionOption},

            [Parameter(ParameterSetName='Uri')]
            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='FilePathUri')]
            [System.Management.Automation.Runspaces.AuthenticationMechanism]
            ${Authentication},

            [Parameter(ParameterSetName='FilePathComputerName')]
            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='Uri')]
            [Parameter(ParameterSetName='FilePathUri')]
            [switch]
            ${EnableNetworkAccess},

            [Parameter(ValueFromPipeline=$true)]
            [psobject]
            ${InputObject},

            [Alias('Args')]
            [System.Object[]]
            ${ArgumentList},

            [Parameter(ParameterSetName='ComputerName')]
            [Parameter(ParameterSetName='Uri')]
            [string]
            ${CertificateThumbprint})

        begin
        {
            function Get-ScriptblockFunctions
            {
                Param (
                    [Parameter(Mandatory=$True)]
                    [ValidateNotNull()]
                    [Scriptblock]
                    $Scriptblock
                )

                # Return all user-defined function names contained within the supplied scriptblock

                $Scriptblock.Ast.FindAll({$args[0] -is [Management.Automation.Language.CommandAst]}, $True) |
                    % { $_.CommandElements[0] } | Sort-Object Value -Unique | ForEach-Object { $_.Value } |
                        ? { ls Function:\$_ -ErrorAction Ignore }
            }

            function Get-FunctionDefinition
            {
                Param (
                    [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
                    [String[]]
                    [ValidateScript({Get-Command $_})]
                    $FunctionName
                )

                BEGIN
                {
                    # We want to output a single string versus an array of strings
                    $FunctionCollection = ''    
                }

                PROCESS
                {
                    foreach ($Function in $FunctionName)
                    {
                        $FunctionInfo = Get-Command $Function

                        $FunctionCollection += "function $($FunctionInfo.Name) {`n$($FunctionInfo.Definition)`n}`n"
                    }
                }

                END
                {
                    $FunctionCollection
                }
            }

            try {
                $outBuffer = $null
                if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
                {
                    $PSBoundParameters['OutBuffer'] = 1
                }
                $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Invoke-Command', [System.Management.Automation.CommandTypes]::Cmdlet)
                if($PSBoundParameters['ScriptBlock'])
                {
                    $FunctionDefinitions = Get-ScriptblockFunctions $ScriptBlock | Get-FunctionDefinition
                    $PSBoundParameters['ScriptBlock'] = [ScriptBlock]::Create($FunctionDefinitions + $ScriptBlock.ToString())
                }
                $scriptCmd = {& $wrappedCmd @PSBoundParameters }
                $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
                $steppablePipeline.Begin($PSCmdlet)
            } catch {
                throw
            }
        }

        process
        {
            try {
                $steppablePipeline.Process($_)
            } catch {
                throw
            }
        }

        end
        {
            try {
                $steppablePipeline.End()
            } catch {
                throw
            }
        }
        <#

        .ForwardHelpTargetName Invoke-Command
        .ForwardHelpCategory Cmdlet

        #>
    }
}

<#function ConvertTo-ForensicTimeline
{
    [CmdletBinding()]
    param
    ( 
        [Parameter(Mandatory = $true, Position = 0, ValueFromPipeline = $true)]
        [PSObject[]]
        $InputObject
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        foreach($object in $InputObject)
        {
            switch ($object.TypeNames[0])
            {
                PowerForensics.Artifacts.Amcache
                {
                    break;
                }
                PowerForensics.Artifacts.Prefetch
                {
                    Write-Output ([PowerForensics.ForensicTimeline]::Get($object.BaseObject as Prefetch);
                    break;
                }
                PowerForensics.Artifacts.ScheduledJob
                {
                    Write-Output ([PowerForensics.Formats.ForensicTimeline]::Get(inputobject.BaseObject as ScheduledJob), $true);
                    break;
                }
                PowerForensics.Artifacts.ShellLink
                {
                    Write-Output ([PowerForensics.Formats.ForensicTimeline]::Get(inputobject.BaseObject as ShellLink), $true);
                    break;
                }
                PowerForensics.Artifacts.UserAssist
                {
                    Write-Output ([PowerForensics.Formats.ForensicTimeline]::Get(inputobject.BaseObject as UserAssist), $true);
                    break;
                }
                PowerForensics.EventLog.EventRecord
                {
                    Write-Output ([PowerForensics.Formats.ForensicTimeline]::Get(inputobject.BaseObject as EventRecord), $true);
                    break;
                }
                PowerForensics.Ntfs.FileRecord
                {
                    FileRecord r = inputobject.BaseObject as FileRecord;
                    try
                    {
                        Write-Output ([PowerForensics.Formats.ForensicTimeline]::Get(r), $true);
                    }
                    catch
                    {
                            
                    }
                    break;
                }
                PowerForensics.Ntfs.UsnJrnl
                {
                    Write-Output ([PowerForensics.Formats.ForensicTimeline]::Get(inputobject.BaseObject as UsnJrnl), $true);
                    break;
                }
                PowerForensics.Registry.NamedKey
                {
                    Write-Output ([PowerForensics.Formats.ForensicTimeline]::Get(inputobject.BaseObject as NamedKey), $true);
                    break;
                }
                default
                {
                    throw new Exception(String.Format('{0} type not supported by ConvertTo-ForensicTimeline', inputobject.TypeNames[0]));
                }
            }
        }
    }
}#>

function ConvertTo-Gource
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true, Position = 0, ValueFromPipeline = $true)]
        [ForensicTimeline[]]
        $InputObject
    )
    
    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        Write-Output ([PowerForensics.Formats.Gource]::GetInstances($InputObject))
    }
}

function Copy-ForensicFile
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = 'ByPath')]
        [Alias('FullName')]
        [string]
        $Path,

        [Parameter(ParameterSetName = 'ByIndex')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = 'ByIndex')]
        [Int32]
        $Index,

        [Parameter(Mandatory = $true, Position = 1)]
        [string]
        $Destination
    )

    begin
    {
        if (('PowerForensics.BootSector.MasterBootRecord' -as [Type]) -eq $null)
        {
            Add-PowerForensicsType
        }
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByPath { $record = [PowerForensics.FileSystems.Ntfs.FileRecord]::Get($Path, $true); break }
            ByVolume { $record = [PowerForensics.FileSystems.Ntfs.FileRecord]::Get($VolumeName, $Index, $true); break }
        }

        # If user specifies the name of a stream then copy just that stream

        # Else check for multiple DATA attributes

        # If multiple DATA attributes, then copy them all

        # Else copy just the main DATA attribute
        $record.CopyFile($Destination)
    }
}

function Get-ForensicAlternateDataStream
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',
        
        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.AlternateDataStream]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.AlternateDataStream]::GetInstancesByPath($Path)); break }
        }
    }
}

function Get-ForensicAmcache
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.ApplicationCompatibilityCache.Amcache]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.ApplicationCompatibilityCache.Amcache]::GetInstancesByPath($HivePath)); break }
        }
    }
}

function Get-ForensicAttrDef
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByitVolume { Write-Output ([PowerForensics.FileSystems.Ntfs.AttrDef]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.FileSystems.Ntfs.AttrDef]::GetInstancesByPath($Path)); break }
        }
    }
}

function Get-ForensicBitmap
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',
     
        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path,
     
        [Parameter(Mandatory = $true)]
        [Int64]
        $Cluster
    )
    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Object ([PowerForensics.FileSystems.Ntfs.Bitmap]::Get($VolumeName, $Cluster)); break }
            ByPath { Write-Object ([PowerForensics.FileSystems.Ntfs.Bitmap]::GetByPath($Path, $Cluster)); break }
        }
    }
}

function Get-ForensicBootSector
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true, Position = 0)]
        [Alias('DrivePath')]
        [string]
        $Path,

        [Parameter()]
        [switch]
        $AsBytes
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        $mbr = [PowerForensics.BootSectors.MasterBootRecord]::Get($Path)

        if ($mbr.PartitionTable[0].SystemId -eq 'EFI_GPT_DISK')
        {
            if ($AsBytes)
            {
                Write-Output ([PowerForensics.BootSectors.GuidPartitionTable]::GetBytes($Path))
            }
            else
            {
                Write-Output ([PowerForensics.BootSectors.GuidPartitionTable]::Get($Path))
            }
        }
        else
        {
            if ($AsBytes)
            {
                Write-Output ([PowerForensics.BootSectors.MasterBootRecord]::GetBytes($Path))
            }
            else
            {
                Write-Output $mbr
            }
        }
    }
}

function Get-ForensicChildItem
{
    [CmdletBinding()]
    param
    ( 
        [Parameter(Position = 0)]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        if (!($PSBoundParameters.ContainsKey('Path')))
        {
            path = this.SessionState.Path.CurrentFileSystemLocation.Path;
        }
        try
        {
            switch([PowerForensics.Helper]::GetFileSystemType([PowerForensics.Helper]::GetVolumeFromPath($Path)))
            {
                EXFAT
                {
                    throw "EXFAT File System not yet implemented."
                }
                FAT
                {
                    [PowerForensics.FileSystems.Fat.DirectoryEntry]::GetChildItem($Path)
                }
                NTFS
                {
                    [PowerForensics.FileSystems.Ntfs.IndexEntry]::GetInstances($Path)
                }
            }
        }
        catch
        {
            Write-Output $null
        }
    }
}

function Get-ForensicContent
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true, Position = 0 , ParameterSetName = 'ByPath')]
        [Alias('FullName')]
        [string]
        $Path,

        [Parameter(ParameterSetName = 'ByIndex')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByIndex')]
        [Int32]
        $Index,

        [Parameter()]
        [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]
        $Encoding,

        [Parameter()]
        [Alias('First', 'Head')]
        [Int64]
        $TotalCount,

        [Parameter()]
        [Alias('Last')]
        [Int64]
        $Tail
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        #region Encoding

        if ($PSBoundParameters.ContainsKey('Encoding'))
        {
            if ($Encoding -eq [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::Ascii)
            {
                $contentEncoding = [System.Text.Encoding]::ASCII
            }
            elseif ($Encoding -eq [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::BigEndianUnicode)
            {
                $contentEncoding = [System.Text.Encoding]::BigEndianUnicode
            }
            elseif ($Encoding -eq [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::Byte)
            {
                $asBytes = $true
            }
            elseif ($Encoding -eq [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::String)
            {
                $contentEncoding = [System.Text.Encoding]::Unicode
            }
            elseif ($Encoding -eq [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::Unicode)
            {
                $contentEncoding = [System.Text.Encoding]::Unicode
            }
            elseif ($Encoding -eq [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::Unknown)
            {
                $asBytes = $true
            }
            elseif ($Encoding -eq [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::UTF7)
            {
                $contentEncoding = [System.Text.Encoding]::UTF7
            }
            elseif ($Encoding -eq [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::UTF8)
            {
                $contentEncoding = [System.Text.Encoding]::UTF8
            }
        }

        if ($PSBoundParameters.ContainsKey('Path'))
        {
            $contentArray = [PowerForensics.FileSystems.Ntfs.FileRecord]::Get($filePath, $true).GetContent()
        }

        elseif($PSBoundParameters.ContainsKey('Index'))
        {
            $contentArray = [PowerForensics.FileSystems.Ntfs.FileRecord]::Get($VolumeName, $Index, $true).GetContent()
        }

        if ($asBytes)
        {
            Write-Output $contentArray
        }
        else
        {
            $outputArray = $contentEncoding.GetString($contentArray).Split('\n')

            if ($PSBoundParameters.ContainsKey('TotalCount') -and $PSBoundParameters.ContainsKey('Tail'))
            {
                throw (New-Object -TypeName InvalidOperationException('The parameters TotalCount and Tail cannot be used together. Please specify only one parameter.'))
            }
            elseif ($PSBoundParameters.ContainsKey('TotalCount'))
            {
                for ($i = 0; ($i -lt $TotalCount) -and ($i -lt $outputArray.Length); $i++)
                {
                    Write-Output $outputArray[$i]
                }
            }
            elseif ($PSBoundParameters.ContainsKey('Tail'))
            {
                for ($i = $Tail; ($i -gt 0); $i--)
                {
                    if ($i > $outputArray.Length)
                    {
                        $i = $outputArray.Length
                    }

                    Write-Output $outputArray[$outputArray.Length - $i]
                }
            }
            else
            {
                Write-Output $outputArray
            }
        }
    }
}

function Get-ForensicEventLog
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.EventLog.EventRecord]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.EventLog.EventRecord]::Get($Path)); break }
        }
    }
}

function Get-ForensicExplorerTypedPath
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.TypedPaths]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.TypedPaths]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicFileRecord
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName = 'ByIndex')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Position = 0, ParameterSetName = 'ByIndex')]
        [Int32]
        $Index,

        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path,

        [Parameter(Mandatory = $true, ParameterSetName = 'ByMftPath')]
        [string]
        $MftPath,

        [Parameter(ParameterSetName = 'ByIndex')]
        [Parameter(ParameterSetName = 'ByPath')]
        [switch]
        $AsBytes
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByIndex
            {
                if ($PSBoundParameters.ContainsKey('Index'))
                {
                    if ($AsBytes)
                    {
                        Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::GetRecordBytes($VolumeName, $Index));
                    }
                    else
                    {
                        Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::Get($VolumeName, $Index));
                    }
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::GetInstances($VolumeName));
                }
                break;
            }
            ByPath
            {
                if ($AsBytes)
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::GetRecordBytes($Path));
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::Get($Path, $false));
                }
                break;
            }
            MFTPathByPath
            {
                if ($AsBytes)
                {

                }
                else
                {

                }
                break;
            }
            ByMftPath
            {
                Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::GetInstancesByPath($MftPath));
                break;
            }
        }
    }
}

function Get-ForensicFileRecordIndex
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true, Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        Write-Output ([PowerForensics.FileSystems.Ntfs.IndexEntry]::Get($Path).RecordNumber)
    }
}

function Get-ForensicFileSlack
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName = 'ByIndex')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Position = 0, ParameterSetName = 'ByIndex')]
        [Int32] 
        $Index,

        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByIndex
            {
                if ($PSBoundParameters.ContainsKey('Index'))
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::Get($VolumeName, $Index, $true).GetSlack())
                }
                else
                {
                    foreach ($record in ([PowerForensics.FileSystems.Ntfs.FileRecord]::GetInstances($VolumeName)))
                    {
                        Write-Output ($record.GetSlack())
                    }
                }
                break
            }
            ByPath
            {
                Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::Get($Path, $true).GetSlack())
                break
            }
        }
    }
}

function Get-ForensicGuidPartitionTable
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true, Position = 0)]
        [Alias('DrivePath')]
        [string]
        $Path,

        [Parameter()]
        [switch]
        $AsBytes
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        if ($AsBytes)
        {
            Write-Output ([PowerForensics.BootSectors.GuidPartitionTable]::GetBytes($Path))
        }
        else
        {
            Write-Output ([PowerForensics.BootSectors.GuidPartitionTable]::Get($Path))
        }
    }
}

function Get-ForensicMasterBootRecord
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true, Position = 0)]
        [Alias('DrivePath')]
        [string]
        $Path,

        [Parameter()]
        [switch]
        $AsBytes
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        if ($AsBytes)
        {
            Write-Output ([PowerForensics.BootSectors.MasterBootRecord]::GetBytes($Path))
        }
        else
        {
            Write-Output ([PowerForensics.BootSectors.MasterBootRecord]::Get($Path))
        }
    }
}

function Get-ForensicMftSlack
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName = 'ByIndex')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Position = 0, ParameterSetName = 'ByIndex')]
        [Int32]
        $Index,

        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path,

        [Parameter(Mandatory = $true, ParameterSetName = 'ByMftPath')]
        [string]
        $MftPath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByIndex
            {
                if ($PSBoundParameters.ContainsKey('Index'))
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.FileRecord]::Get($VolumeName, $Index, $true).GetMftSlack())
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.MasterFileTable]::GetSlack($VolumeName))
                }
                break
            }
            ByPath
            {
                Write-Output ([PowerForensics.Ntfs.FileRecord]::Get($Path, $true).GetMftSlack())
                break
            }
            MFTPath
            {
                Write-Output ([PowerForensics.Ntfs.MasterFileTable]::GetSlackByPath($MftPath))
                break
            }
        }
    }
}

function Get-ForensicNetworkList
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.SoftwareHive.NetworkList]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.SoftwareHive.NetworkList]::GetInstancesByPath($HivePath)); break }
        }
    }
}

function Get-ForensicOfficeFileMru
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.MicrosoftOffice.FileMRU]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.MicrosoftOffice.FileMRU]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicOfficeOutlookCatalog
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.MicrosoftOffice.OutlookCatalog]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.MicrosoftOffice.OutlookCatalog]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicsOfficePlaceMru
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.MicrosoftOffice.PlaceMRU]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.MicrosoftOffice.PlaceMRU]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicOfficeTrustRecord
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.MicrosoftOffice.TrustRecord]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.MicrosoftOffice.TrustRecord]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicPartitionTable
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true, Position = 0)]
        [Alias('DrivePath')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        $mbr = [PowerForensics.BootSectors.MasterBootRecord]::Get($Path)

        if ($mbr.PartitionTable[0].SystemId -eq 'EFI_GPT_DISK')
        {
            Write-Output ([PowerForensics.BootSectors.GuidPartitionTable]::Get($Path).GetPartitionTable())
        }
        else
        {
            Write-Output $mbr.GetPartitionTable()
        }
    }
}

function Get-ForensicPrefetch
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path,

        [Parameter()]
        [switch]
        $Fast
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume
            {
                if ($Fast)
                {
                    Write-Output ([PowerForensics.Windows.Artifacts.Prefetch]::GetInstances($VolumeName, $Fast))
                }
                else
                {
                    Write-Output ([PowerForensics.Windows.Artifacts.Prefetch]::GetInstances($VolumeName))
                }
                break
            }
            ByPath
            {
                if ($Fast)
                {
                    # Output the Prefetch object for the corresponding file
                    Write-Output ([PowerForensics.Windows.Artifacts.Prefetch]::Get($Path, $Fast))
                }
                else
                {
                    # Output the Prefetch object for the corresponding file
                    Write-Output ([PowerForensics.Windows.Artifacts.Prefetch]::Get($Path))
                }
                break
            }
        }
    }
}

function Get-ForensicRecentFileCache
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.ApplicationCompatibilityCache.RecentFileCache]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.ApplicationCompatibilityCache.RecentFileCache]::GetInstancesByPath($Path)); break }
        }
    }
}

function Get-ForensicRegistryKey
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true)]
        [Alias('Path')]
        [string]
        $HivePath,

        [Parameter(ParameterSetName = 'ByKey')]
        [string]
        $Key,

        [Parameter(Mandatory = $true, ParameterSetName = 'Recursive')]
        [switch]
        $Recurse
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        if ($Recurse)
        {
            Write-Output ([PowerForensics.Windows.Registry.NamedKey]::GetInstancesRecurse($HivePath))
        }
        else
        {
            if (!($PSBoundParameters.ContainsKey('Key')))
            {
                $Key = $null
            }

            Write-Output ([PowerForensics.Windows.Registry.NamedKey]::GetInstances($HivePath, $Key))
        }
    }
}

function Get-ForensicRegistryValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true)]
        [Alias('Path')]
        [string]
        $HivePath,

        [Parameter()]
        [string]
        $Key,

        [Parameter()]
        [string]
        $Value
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        if (!($PSBoundParameters.ContainsKey('Key')))
        {
            $Key = $null
        }

        if ($PSBoundParameters.ContainsKey('Value'))
        {
            Write-Output ([PowerForensics.Windows.Registry.ValueKey]::Get($HivePath, $Key, $Value))
        }
        else
        {
            foreach ($vk in ([PowerForensics.Windows.Registry.ValueKey]::GetInstances($HivePath, $Key)))
            {
                Write-Output $vk
            }
        }
    }
}

function Get-ForensicRunMru
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.RunMRU]::GetInstances($VolumeName), $true); break }
            ByPath {Write-Output ([PowerForensics.Windows.Artifacts.UserHive.RunMRU]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicRunKey
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.RunKey]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.RunKey]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicScheduledJob
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]$Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.ScheduledJob]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.ScheduledJob]::Get($Path)); break }
        }
    }
}

function Get-ForensicShellLink
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('FullName')]
        [string]$Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.ShellLink]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.ShellLink]::Get($Path)); break }
        }
    }
}

function Get-ForensicShimcache
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output  ([PowerForensics.Windows.Artifacts.ApplicationCompatibilityCache.Shimcache]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.ApplicationCompatibilityCache.Shimcache]::GetInstancesByPath($HivePath)); break }
        }
    }
}

function Get-ForensicSid
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.SamHive.Sid]::Get($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.SamHive.Sid]::GetByPath($HivePath)); break }
        }
    }
}

function Get-ForensicTimeline
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0)]
        [string]
        $VolumeName = '\\.\C:'
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        [PowerForensics.Formats.ForensicTimeline]::GetInstances($VolumeName)
    }
}

function Get-ForensicTimezone
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]        
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.SystemHive.Timezone]::Get($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.SystemHive.Timezone]::GetByPath($HivePath)); break }
        }
    }
}

function Get-ForensicTypedUrl
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Alias('Path')]
        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.TypedUrls]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.TypedUrls]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicUnallocatedSpace
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0)]        
        [string]
        $VolumeName = '\\.\C:',

        [Parameter()]
        [Alias('FullName')]
        [UInt64]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        foreach ($b in [PowerForensics.FileSystems.Ntfs.Bitmap]::GetInstances($VolumeName))
        {
            if (!($b.InUse))
            {
                Write-Output $b
            }
        }
    }
}

function Get-ForensicUserAssist
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.UserAssist]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.UserAssist]::Get($HivePath)); break }
        }
    }
}

function Get-ForensicUsnJrnl
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path,

        [Parameter()]
        [Int64]
        $Usn
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume
            {
                if($PSBoundParameters.ContainsKey('Usn'))
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.UsnJrnl]::Get($VolumeName, $Usn))
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.UsnJrnl]::GetInstances($VolumeName))
                }
                break
            }
            ByPath
            {
                if($PSBoundParameters.ContainsKey('Usn'))
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.UsnJrnl]::GetByPath($Path, $Usn))
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.UsnJrnl]::GetInstancesByPath($Path))
                }
                break
            }
        }
    }
}

function Get-ForensicUsnJrnlInformation
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path,

        [Parameter()]
        [switch]
        $AsBytes
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume
            {
                if ($AsBytes)
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.UsnJrnlInformation]::GetBytes($VolumeName))
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.UsnJrnlInformation]::Get($VolumeName))
                }
                break
            }
            ByPath
            {
                if ($AsBytes)
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.UsnJrnlInformation]::GetBytesByPath($Path))
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.Ntfs.UsnJrnlInformation]::GetByPath($Path))
                }
                break
            }
        }
    }
}

function Get-ForensicVolumeBootRecord
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('FullName')]
        [string]
        $Path,

        [Parameter()]
        [switch]
        $AsBytes
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume
            {
                if ($Asbytes)
                {
                    Write-Output ([PowerForensics.FileSystems.VolumeBootRecord]::GetBytes($VolumeName));
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.VolumeBootRecord]::Get($VolumeName));
                }
                break
            }
            ByPath
            {
                if ($Asbytes)
                {
                    Write-Object ([PowerForensics.FileSystems.VolumeBootRecord]::GetBytesByPath($Path));
                }
                else
                {
                    Write-Output ([PowerForensics.FileSystems.VolumeBootRecord]::GetByPath($Path));
                }
                break
            }
        }
    }
}

function Get-ForensicVolumeInformation
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.FileSystems.Ntfs.VolumeInformation]::Get($VolumeName)); break }
            ByPath { WriteOutput ([PowerForensics.FileSystems.Ntfs.VolumeInformation]::GetByPath($Path)); break }
        }
    }
}

function Get-ForensicVolumeName
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',


        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath', ValueFromPipelineByPropertyName = $true)]
        [Alias('FullName')]
        [string]
        $Path
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.FileSystems.Ntfs.VolumeName]::Get($VolumeName)) }
            ByPath { Write-Output ([PowerForensics.FileSystems.Ntfs.VolumeName]::GetByPath($Path)); break}
        }
    }
}

function Get-ForensicWindowsSearchHistory
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, ParameterSetName = 'ByVolume')]
        [string]
        $VolumeName = '\\.\C:',

        [Parameter(Mandatory = $true, ParameterSetName = 'ByPath')]
        [Alias('Path')]
        [string]
        $HivePath
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            ByVolume { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.WordWheelQuery]::GetInstances($VolumeName)); break }
            ByPath { Write-Output ([PowerForensics.Windows.Artifacts.UserHive.WordWheelQuery]::Get($HivePath)); break }
        }
    }
}

function Invoke-ForensicDD
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true)]
        [string]
        $InFile,

        [Parameter()]
        [string]
        $OutFile,

        [Parameter()]
        [Int64]
        $Offset = 0,

        [Parameter()]
        [UInt32]
        $BlockSize = 512,

        [Parameter(Mandatory = $true)]
        [UInt32]
        $Count
    )

    begin
    {
        Add-PowerForensicsType
    }

    process 
    {
        if ($PSBoundParameters.ContainsKey('OutFile'))
        {
            [PowerForensics.Utilities.DD]::Get($InFile, $OutFile, $Offset, $BlockSize, $Count)
        }
        else
        {
            Write-Output ([PowerForensics.Utilities.DD]::Get($InFile, $Offset, $BlockSize, $Count))
        }
    }
}
