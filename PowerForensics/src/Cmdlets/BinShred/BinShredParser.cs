//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./BinShred.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class BinShredParser : Parser {
	public const int
		QUOTEDVALUE=1, COMMA=2, QUOTE=3, COLON=4, SEMI=5, LPAREN=6, RPAREN=7, 
		BYTES=8, ITEMS=9, AS=10, DESCRIBED=11, BY=12, ASCII=13, UNICODE=14, UTF8=15, 
		UINT64=16, UINT32=17, UINT16=18, INT64=19, INT32=20, INT16=21, SINGLE=22, 
		FLOAT=23, DOUBLE=24, ADDITIONAL=25, PROPERTIES=26, IDENTIFIED=27, FROM=28, 
		PADDING=29, TO=30, MULTIPLE=31, OF=32, WS=33, DOC_COMMENT=34, BLOCK_COMMENT=35, 
		LINE_COMMENT=36, INT=37, HEXADECIMAL=38, LABEL=39;
	public const int
		RULE_template = 0, RULE_templateEntry = 1, RULE_parseRule = 2, RULE_ruleBody = 3, 
		RULE_propertyName = 4, RULE_lookupTableName = 5, RULE_ruleOptions = 6, 
		RULE_byteOption = 7, RULE_sizeReference = 8, RULE_byteFormat = 9, RULE_lookupTable = 10, 
		RULE_lookupTableEntry = 11, RULE_lookupTableEntryKey = 12, RULE_label = 13;
	public static readonly string[] ruleNames = {
		"template", "templateEntry", "parseRule", "ruleBody", "propertyName", 
		"lookupTableName", "ruleOptions", "byteOption", "sizeReference", "byteFormat", 
		"lookupTable", "lookupTableEntry", "lookupTableEntryKey", "label"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "','", "'\"'", "':'", "';'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "QUOTEDVALUE", "COMMA", "QUOTE", "COLON", "SEMI", "LPAREN", "RPAREN", 
		"BYTES", "ITEMS", "AS", "DESCRIBED", "BY", "ASCII", "UNICODE", "UTF8", 
		"UINT64", "UINT32", "UINT16", "INT64", "INT32", "INT16", "SINGLE", "FLOAT", 
		"DOUBLE", "ADDITIONAL", "PROPERTIES", "IDENTIFIED", "FROM", "PADDING", 
		"TO", "MULTIPLE", "OF", "WS", "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", 
		"INT", "HEXADECIMAL", "LABEL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BinShred.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BinShredParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class TemplateContext : ParserRuleContext {
		public TemplateEntryContext[] templateEntry() {
			return GetRuleContexts<TemplateEntryContext>();
		}
		public TemplateEntryContext templateEntry(int i) {
			return GetRuleContext<TemplateEntryContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(BinShredParser.Eof, 0); }
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; templateEntry();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTES) | (1L << ITEMS) | (1L << AS) | (1L << DESCRIBED) | (1L << BY) | (1L << ASCII) | (1L << UNICODE) | (1L << UTF8) | (1L << UINT64) | (1L << UINT32) | (1L << UINT16) | (1L << INT64) | (1L << INT32) | (1L << INT16) | (1L << SINGLE) | (1L << FLOAT) | (1L << DOUBLE) | (1L << ADDITIONAL) | (1L << PROPERTIES) | (1L << IDENTIFIED) | (1L << FROM) | (1L << PADDING) | (1L << TO) | (1L << MULTIPLE) | (1L << OF) | (1L << LABEL))) != 0)) {
				{
				{
				State = 29; templateEntry();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 35; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateEntryContext : ParserRuleContext {
		public ParseRuleContext parseRule() {
			return GetRuleContext<ParseRuleContext>(0);
		}
		public LookupTableContext lookupTable() {
			return GetRuleContext<LookupTableContext>(0);
		}
		public TemplateEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterTemplateEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitTemplateEntry(this);
		}
	}

	[RuleVersion(0)]
	public TemplateEntryContext templateEntry() {
		TemplateEntryContext _localctx = new TemplateEntryContext(Context, State);
		EnterRule(_localctx, 2, RULE_templateEntry);
		try {
			State = 39;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; parseRule();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; lookupTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParseRuleContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(BinShredParser.COLON, 0); }
		public RuleBodyContext[] ruleBody() {
			return GetRuleContexts<RuleBodyContext>();
		}
		public RuleBodyContext ruleBody(int i) {
			return GetRuleContext<RuleBodyContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(BinShredParser.SEMI, 0); }
		public ParseRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parseRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterParseRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitParseRule(this);
		}
	}

	[RuleVersion(0)]
	public ParseRuleContext parseRule() {
		ParseRuleContext _localctx = new ParseRuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_parseRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; label();
			State = 42; Match(COLON);
			State = 43; ruleBody();
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << BYTES) | (1L << ITEMS) | (1L << AS) | (1L << DESCRIBED) | (1L << BY) | (1L << ASCII) | (1L << UNICODE) | (1L << UTF8) | (1L << UINT64) | (1L << UINT32) | (1L << UINT16) | (1L << INT64) | (1L << INT32) | (1L << INT16) | (1L << SINGLE) | (1L << FLOAT) | (1L << DOUBLE) | (1L << ADDITIONAL) | (1L << PROPERTIES) | (1L << IDENTIFIED) | (1L << FROM) | (1L << PADDING) | (1L << TO) | (1L << MULTIPLE) | (1L << OF) | (1L << DOC_COMMENT) | (1L << LABEL))) != 0)) {
				{
				{
				State = 44; ruleBody();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 50; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBodyContext : ParserRuleContext {
		public ITerminalNode DOC_COMMENT() { return GetToken(BinShredParser.DOC_COMMENT, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(BinShredParser.LPAREN, 0); }
		public SizeReferenceContext sizeReference() {
			return GetRuleContext<SizeReferenceContext>(0);
		}
		public ITerminalNode ITEMS() { return GetToken(BinShredParser.ITEMS, 0); }
		public ITerminalNode RPAREN() { return GetToken(BinShredParser.RPAREN, 0); }
		public RuleOptionsContext ruleOptions() {
			return GetRuleContext<RuleOptionsContext>(0);
		}
		public ITerminalNode ADDITIONAL() { return GetToken(BinShredParser.ADDITIONAL, 0); }
		public ITerminalNode PROPERTIES() { return GetToken(BinShredParser.PROPERTIES, 0); }
		public ITerminalNode IDENTIFIED() { return GetToken(BinShredParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(BinShredParser.BY, 0); }
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(BinShredParser.FROM, 0); }
		public LookupTableNameContext lookupTableName() {
			return GetRuleContext<LookupTableNameContext>(0);
		}
		public ITerminalNode PADDING() { return GetToken(BinShredParser.PADDING, 0); }
		public ITerminalNode TO() { return GetToken(BinShredParser.TO, 0); }
		public ITerminalNode MULTIPLE() { return GetToken(BinShredParser.MULTIPLE, 0); }
		public ITerminalNode OF() { return GetToken(BinShredParser.OF, 0); }
		public ITerminalNode BYTES() { return GetToken(BinShredParser.BYTES, 0); }
		public RuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterRuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitRuleBody(this);
		}
	}

	[RuleVersion(0)]
	public RuleBodyContext ruleBody() {
		RuleBodyContext _localctx = new RuleBodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_ruleBody);
		int _la;
		try {
			State = 89;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 53;
				_la = TokenStream.La(1);
				if (_la==DOC_COMMENT) {
					{
					State = 52; Match(DOC_COMMENT);
					}
				}

				State = 68;
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					{
					State = 55; label();
					State = 56; Match(LPAREN);
					State = 57; sizeReference();
					State = 58; Match(ITEMS);
					State = 59; Match(RPAREN);
					}
					}
					break;
				case 2:
					{
					{
					State = 61; label();
					State = 66;
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 62; Match(LPAREN);
						State = 63; ruleOptions();
						State = 64; Match(RPAREN);
						}
						break;
					}
					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 70; Match(LPAREN);
				State = 71; Match(ADDITIONAL);
				State = 72; Match(PROPERTIES);
				State = 73; Match(IDENTIFIED);
				State = 74; Match(BY);
				State = 75; propertyName();
				State = 76; Match(FROM);
				State = 77; lookupTableName();
				State = 78; Match(RPAREN);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 80; Match(LPAREN);
				State = 81; Match(PADDING);
				State = 82; Match(TO);
				State = 83; Match(MULTIPLE);
				State = 84; Match(OF);
				State = 85; sizeReference();
				State = 86; Match(BYTES);
				State = 87; Match(RPAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LookupTableNameContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LookupTableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lookupTableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterLookupTableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitLookupTableName(this);
		}
	}

	[RuleVersion(0)]
	public LookupTableNameContext lookupTableName() {
		LookupTableNameContext _localctx = new LookupTableNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_lookupTableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleOptionsContext : ParserRuleContext {
		public ByteOptionContext byteOption() {
			return GetRuleContext<ByteOptionContext>(0);
		}
		public RuleOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterRuleOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitRuleOptions(this);
		}
	}

	[RuleVersion(0)]
	public RuleOptionsContext ruleOptions() {
		RuleOptionsContext _localctx = new RuleOptionsContext(Context, State);
		EnterRule(_localctx, 12, RULE_ruleOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; byteOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteOptionContext : ParserRuleContext {
		public SizeReferenceContext sizeReference() {
			return GetRuleContext<SizeReferenceContext>(0);
		}
		public ITerminalNode BYTES() { return GetToken(BinShredParser.BYTES, 0); }
		public ITerminalNode AS() { return GetToken(BinShredParser.AS, 0); }
		public ByteFormatContext byteFormat() {
			return GetRuleContext<ByteFormatContext>(0);
		}
		public ITerminalNode DESCRIBED() { return GetToken(BinShredParser.DESCRIBED, 0); }
		public ITerminalNode BY() { return GetToken(BinShredParser.BY, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ByteOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterByteOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitByteOption(this);
		}
	}

	[RuleVersion(0)]
	public ByteOptionContext byteOption() {
		ByteOptionContext _localctx = new ByteOptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_byteOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; sizeReference();
			State = 98; Match(BYTES);
			State = 106;
			_la = TokenStream.La(1);
			if (_la==AS) {
				{
				State = 99; Match(AS);
				State = 100; byteFormat();
				State = 104;
				_la = TokenStream.La(1);
				if (_la==DESCRIBED) {
					{
					State = 101; Match(DESCRIBED);
					State = 102; Match(BY);
					State = 103; label();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeReferenceContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode INT() { return GetToken(BinShredParser.INT, 0); }
		public SizeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterSizeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitSizeReference(this);
		}
	}

	[RuleVersion(0)]
	public SizeReferenceContext sizeReference() {
		SizeReferenceContext _localctx = new SizeReferenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_sizeReference);
		try {
			State = 110;
			switch (TokenStream.La(1)) {
			case BYTES:
			case ITEMS:
			case AS:
			case DESCRIBED:
			case BY:
			case ASCII:
			case UNICODE:
			case UTF8:
			case UINT64:
			case UINT32:
			case UINT16:
			case INT64:
			case INT32:
			case INT16:
			case SINGLE:
			case FLOAT:
			case DOUBLE:
			case ADDITIONAL:
			case PROPERTIES:
			case IDENTIFIED:
			case FROM:
			case PADDING:
			case TO:
			case MULTIPLE:
			case OF:
			case LABEL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; label();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteFormatContext : ParserRuleContext {
		public ITerminalNode ASCII() { return GetToken(BinShredParser.ASCII, 0); }
		public ITerminalNode UNICODE() { return GetToken(BinShredParser.UNICODE, 0); }
		public ITerminalNode UTF8() { return GetToken(BinShredParser.UTF8, 0); }
		public ITerminalNode UINT64() { return GetToken(BinShredParser.UINT64, 0); }
		public ITerminalNode UINT32() { return GetToken(BinShredParser.UINT32, 0); }
		public ITerminalNode UINT16() { return GetToken(BinShredParser.UINT16, 0); }
		public ITerminalNode INT64() { return GetToken(BinShredParser.INT64, 0); }
		public ITerminalNode INT32() { return GetToken(BinShredParser.INT32, 0); }
		public ITerminalNode INT16() { return GetToken(BinShredParser.INT16, 0); }
		public ITerminalNode SINGLE() { return GetToken(BinShredParser.SINGLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(BinShredParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(BinShredParser.DOUBLE, 0); }
		public ByteFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteFormat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterByteFormat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitByteFormat(this);
		}
	}

	[RuleVersion(0)]
	public ByteFormatContext byteFormat() {
		ByteFormatContext _localctx = new ByteFormatContext(Context, State);
		EnterRule(_localctx, 18, RULE_byteFormat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASCII) | (1L << UNICODE) | (1L << UTF8) | (1L << UINT64) | (1L << UINT32) | (1L << UINT16) | (1L << INT64) | (1L << INT32) | (1L << INT16) | (1L << SINGLE) | (1L << FLOAT) | (1L << DOUBLE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LookupTableContext : ParserRuleContext {
		public LookupTableNameContext lookupTableName() {
			return GetRuleContext<LookupTableNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(BinShredParser.COLON, 0); }
		public LookupTableEntryContext[] lookupTableEntry() {
			return GetRuleContexts<LookupTableEntryContext>();
		}
		public LookupTableEntryContext lookupTableEntry(int i) {
			return GetRuleContext<LookupTableEntryContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(BinShredParser.SEMI, 0); }
		public LookupTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lookupTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterLookupTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitLookupTable(this);
		}
	}

	[RuleVersion(0)]
	public LookupTableContext lookupTable() {
		LookupTableContext _localctx = new LookupTableContext(Context, State);
		EnterRule(_localctx, 20, RULE_lookupTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; lookupTableName();
			State = 115; Match(COLON);
			State = 116; lookupTableEntry();
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTES) | (1L << ITEMS) | (1L << AS) | (1L << DESCRIBED) | (1L << BY) | (1L << ASCII) | (1L << UNICODE) | (1L << UTF8) | (1L << UINT64) | (1L << UINT32) | (1L << UINT16) | (1L << INT64) | (1L << INT32) | (1L << INT16) | (1L << SINGLE) | (1L << FLOAT) | (1L << DOUBLE) | (1L << ADDITIONAL) | (1L << PROPERTIES) | (1L << IDENTIFIED) | (1L << FROM) | (1L << PADDING) | (1L << TO) | (1L << MULTIPLE) | (1L << OF) | (1L << DOC_COMMENT) | (1L << INT) | (1L << HEXADECIMAL) | (1L << LABEL))) != 0)) {
				{
				{
				State = 117; lookupTableEntry();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 123; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LookupTableEntryContext : ParserRuleContext {
		public LookupTableEntryKeyContext[] lookupTableEntryKey() {
			return GetRuleContexts<LookupTableEntryKeyContext>();
		}
		public LookupTableEntryKeyContext lookupTableEntryKey(int i) {
			return GetRuleContext<LookupTableEntryKeyContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(BinShredParser.COLON, 0); }
		public ITerminalNode QUOTEDVALUE() { return GetToken(BinShredParser.QUOTEDVALUE, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode DOC_COMMENT() { return GetToken(BinShredParser.DOC_COMMENT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(BinShredParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BinShredParser.COMMA, i);
		}
		public LookupTableEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lookupTableEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterLookupTableEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitLookupTableEntry(this);
		}
	}

	[RuleVersion(0)]
	public LookupTableEntryContext lookupTableEntry() {
		LookupTableEntryContext _localctx = new LookupTableEntryContext(Context, State);
		EnterRule(_localctx, 22, RULE_lookupTableEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 125; Match(DOC_COMMENT);
				}
			}

			State = 150;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 128; lookupTableEntryKey();
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 129; Match(COMMA);
					State = 130; lookupTableEntryKey();
					}
					}
					State = 135;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 136; Match(COLON);
				State = 137; Match(QUOTEDVALUE);
				}
				break;
			case 2:
				{
				State = 139; lookupTableEntryKey();
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 140; Match(COMMA);
					State = 141; lookupTableEntryKey();
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 147; Match(COLON);
				State = 148; label();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LookupTableEntryKeyContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode INT() { return GetToken(BinShredParser.INT, 0); }
		public ITerminalNode HEXADECIMAL() { return GetToken(BinShredParser.HEXADECIMAL, 0); }
		public LookupTableEntryKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lookupTableEntryKey; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterLookupTableEntryKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitLookupTableEntryKey(this);
		}
	}

	[RuleVersion(0)]
	public LookupTableEntryKeyContext lookupTableEntryKey() {
		LookupTableEntryKeyContext _localctx = new LookupTableEntryKeyContext(Context, State);
		EnterRule(_localctx, 24, RULE_lookupTableEntryKey);
		try {
			State = 155;
			switch (TokenStream.La(1)) {
			case BYTES:
			case ITEMS:
			case AS:
			case DESCRIBED:
			case BY:
			case ASCII:
			case UNICODE:
			case UTF8:
			case UINT64:
			case UINT32:
			case UINT16:
			case INT64:
			case INT32:
			case INT16:
			case SINGLE:
			case FLOAT:
			case DOUBLE:
			case ADDITIONAL:
			case PROPERTIES:
			case IDENTIFIED:
			case FROM:
			case PADDING:
			case TO:
			case MULTIPLE:
			case OF:
			case LABEL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; label();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; Match(INT);
				}
				break;
			case HEXADECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154; Match(HEXADECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(BinShredParser.LABEL, 0); }
		public ITerminalNode BYTES() { return GetToken(BinShredParser.BYTES, 0); }
		public ITerminalNode ITEMS() { return GetToken(BinShredParser.ITEMS, 0); }
		public ITerminalNode AS() { return GetToken(BinShredParser.AS, 0); }
		public ITerminalNode DESCRIBED() { return GetToken(BinShredParser.DESCRIBED, 0); }
		public ITerminalNode BY() { return GetToken(BinShredParser.BY, 0); }
		public ITerminalNode ASCII() { return GetToken(BinShredParser.ASCII, 0); }
		public ITerminalNode UNICODE() { return GetToken(BinShredParser.UNICODE, 0); }
		public ITerminalNode UTF8() { return GetToken(BinShredParser.UTF8, 0); }
		public ITerminalNode UINT64() { return GetToken(BinShredParser.UINT64, 0); }
		public ITerminalNode UINT32() { return GetToken(BinShredParser.UINT32, 0); }
		public ITerminalNode UINT16() { return GetToken(BinShredParser.UINT16, 0); }
		public ITerminalNode INT64() { return GetToken(BinShredParser.INT64, 0); }
		public ITerminalNode INT32() { return GetToken(BinShredParser.INT32, 0); }
		public ITerminalNode INT16() { return GetToken(BinShredParser.INT16, 0); }
		public ITerminalNode SINGLE() { return GetToken(BinShredParser.SINGLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(BinShredParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(BinShredParser.DOUBLE, 0); }
		public ITerminalNode ADDITIONAL() { return GetToken(BinShredParser.ADDITIONAL, 0); }
		public ITerminalNode PROPERTIES() { return GetToken(BinShredParser.PROPERTIES, 0); }
		public ITerminalNode IDENTIFIED() { return GetToken(BinShredParser.IDENTIFIED, 0); }
		public ITerminalNode FROM() { return GetToken(BinShredParser.FROM, 0); }
		public ITerminalNode PADDING() { return GetToken(BinShredParser.PADDING, 0); }
		public ITerminalNode TO() { return GetToken(BinShredParser.TO, 0); }
		public ITerminalNode MULTIPLE() { return GetToken(BinShredParser.MULTIPLE, 0); }
		public ITerminalNode OF() { return GetToken(BinShredParser.OF, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBinShredListener typedListener = listener as IBinShredListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 26, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTES) | (1L << ITEMS) | (1L << AS) | (1L << DESCRIBED) | (1L << BY) | (1L << ASCII) | (1L << UNICODE) | (1L << UTF8) | (1L << UINT64) | (1L << UINT32) | (1L << UINT16) | (1L << INT64) | (1L << INT32) | (1L << INT16) | (1L << SINGLE) | (1L << FLOAT) | (1L << DOUBLE) | (1L << ADDITIONAL) | (1L << PROPERTIES) | (1L << IDENTIFIED) | (1L << FROM) | (1L << PADDING) | (1L << TO) | (1L << MULTIPLE) | (1L << OF) | (1L << LABEL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3)\xA2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2\x3"+
		"\x2\a\x2!\n\x2\f\x2\xE\x2$\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3*\n\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\a\x4\x30\n\x4\f\x4\xE\x4\x33\v\x4\x3\x4\x3\x4\x3"+
		"\x5\x5\x5\x38\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5\x45\n\x5\x5\x5G\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5\\\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tk\n\t\x5\tm\n\t\x3\n\x3\n\x5\nq\n\n\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x3\f\a\fy\n\f\f\f\xE\f|\v\f\x3\f\x3\f\x3\r\x5\r"+
		"\x81\n\r\x3\r\x3\r\x3\r\a\r\x86\n\r\f\r\xE\r\x89\v\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\a\r\x91\n\r\f\r\xE\r\x94\v\r\x3\r\x3\r\x3\r\x5\r\x99\n\r"+
		"\x3\xE\x3\xE\x3\xE\x5\xE\x9E\n\xE\x3\xF\x3\xF\x3\xF\x2\x2\x10\x2\x4\x6"+
		"\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x2\x4\x3\x2\xF\x1A\x4\x2\n\"))\xA5"+
		"\x2\x1E\x3\x2\x2\x2\x4)\x3\x2\x2\x2\x6+\x3\x2\x2\x2\b[\x3\x2\x2\x2\n]"+
		"\x3\x2\x2\x2\f_\x3\x2\x2\x2\xE\x61\x3\x2\x2\x2\x10\x63\x3\x2\x2\x2\x12"+
		"p\x3\x2\x2\x2\x14r\x3\x2\x2\x2\x16t\x3\x2\x2\x2\x18\x80\x3\x2\x2\x2\x1A"+
		"\x9D\x3\x2\x2\x2\x1C\x9F\x3\x2\x2\x2\x1E\"\x5\x4\x3\x2\x1F!\x5\x4\x3\x2"+
		" \x1F\x3\x2\x2\x2!$\x3\x2\x2\x2\" \x3\x2\x2\x2\"#\x3\x2\x2\x2#%\x3\x2"+
		"\x2\x2$\"\x3\x2\x2\x2%&\a\x2\x2\x3&\x3\x3\x2\x2\x2\'*\x5\x6\x4\x2(*\x5"+
		"\x16\f\x2)\'\x3\x2\x2\x2)(\x3\x2\x2\x2*\x5\x3\x2\x2\x2+,\x5\x1C\xF\x2"+
		",-\a\x6\x2\x2-\x31\x5\b\x5\x2.\x30\x5\b\x5\x2/.\x3\x2\x2\x2\x30\x33\x3"+
		"\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x34\x3\x2\x2\x2\x33"+
		"\x31\x3\x2\x2\x2\x34\x35\a\a\x2\x2\x35\a\x3\x2\x2\x2\x36\x38\a$\x2\x2"+
		"\x37\x36\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x46\x3\x2\x2\x2\x39:\x5\x1C"+
		"\xF\x2:;\a\b\x2\x2;<\x5\x12\n\x2<=\a\v\x2\x2=>\a\t\x2\x2>G\x3\x2\x2\x2"+
		"?\x44\x5\x1C\xF\x2@\x41\a\b\x2\x2\x41\x42\x5\xE\b\x2\x42\x43\a\t\x2\x2"+
		"\x43\x45\x3\x2\x2\x2\x44@\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45G\x3\x2\x2"+
		"\x2\x46\x39\x3\x2\x2\x2\x46?\x3\x2\x2\x2G\\\x3\x2\x2\x2HI\a\b\x2\x2IJ"+
		"\a\x1B\x2\x2JK\a\x1C\x2\x2KL\a\x1D\x2\x2LM\a\xE\x2\x2MN\x5\n\x6\x2NO\a"+
		"\x1E\x2\x2OP\x5\f\a\x2PQ\a\t\x2\x2Q\\\x3\x2\x2\x2RS\a\b\x2\x2ST\a\x1F"+
		"\x2\x2TU\a \x2\x2UV\a!\x2\x2VW\a\"\x2\x2WX\x5\x12\n\x2XY\a\n\x2\x2YZ\a"+
		"\t\x2\x2Z\\\x3\x2\x2\x2[\x37\x3\x2\x2\x2[H\x3\x2\x2\x2[R\x3\x2\x2\x2\\"+
		"\t\x3\x2\x2\x2]^\x5\x1C\xF\x2^\v\x3\x2\x2\x2_`\x5\x1C\xF\x2`\r\x3\x2\x2"+
		"\x2\x61\x62\x5\x10\t\x2\x62\xF\x3\x2\x2\x2\x63\x64\x5\x12\n\x2\x64l\a"+
		"\n\x2\x2\x65\x66\a\f\x2\x2\x66j\x5\x14\v\x2gh\a\r\x2\x2hi\a\xE\x2\x2i"+
		"k\x5\x1C\xF\x2jg\x3\x2\x2\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2l\x65\x3\x2\x2"+
		"\x2lm\x3\x2\x2\x2m\x11\x3\x2\x2\x2nq\x5\x1C\xF\x2oq\a\'\x2\x2pn\x3\x2"+
		"\x2\x2po\x3\x2\x2\x2q\x13\x3\x2\x2\x2rs\t\x2\x2\x2s\x15\x3\x2\x2\x2tu"+
		"\x5\f\a\x2uv\a\x6\x2\x2vz\x5\x18\r\x2wy\x5\x18\r\x2xw\x3\x2\x2\x2y|\x3"+
		"\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|z\x3\x2\x2\x2}~\a"+
		"\a\x2\x2~\x17\x3\x2\x2\x2\x7F\x81\a$\x2\x2\x80\x7F\x3\x2\x2\x2\x80\x81"+
		"\x3\x2\x2\x2\x81\x98\x3\x2\x2\x2\x82\x87\x5\x1A\xE\x2\x83\x84\a\x4\x2"+
		"\x2\x84\x86\x5\x1A\xE\x2\x85\x83\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87\x85"+
		"\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\x3\x2\x2\x2\x89\x87\x3\x2\x2"+
		"\x2\x8A\x8B\a\x6\x2\x2\x8B\x8C\a\x3\x2\x2\x8C\x99\x3\x2\x2\x2\x8D\x92"+
		"\x5\x1A\xE\x2\x8E\x8F\a\x4\x2\x2\x8F\x91\x5\x1A\xE\x2\x90\x8E\x3\x2\x2"+
		"\x2\x91\x94\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x95"+
		"\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x95\x96\a\x6\x2\x2\x96\x97\x5\x1C\xF"+
		"\x2\x97\x99\x3\x2\x2\x2\x98\x82\x3\x2\x2\x2\x98\x8D\x3\x2\x2\x2\x99\x19"+
		"\x3\x2\x2\x2\x9A\x9E\x5\x1C\xF\x2\x9B\x9E\a\'\x2\x2\x9C\x9E\a(\x2\x2\x9D"+
		"\x9A\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\x1B\x3\x2"+
		"\x2\x2\x9F\xA0\t\x3\x2\x2\xA0\x1D\x3\x2\x2\x2\x12\")\x31\x37\x44\x46["+
		"jlpz\x80\x87\x92\x98\x9D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
